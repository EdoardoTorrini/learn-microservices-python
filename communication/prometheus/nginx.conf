worker_processes 1;

events {}

http {
    lua_shared_dict session_map 10m;

    upstream stress_0 { server 172.20.1.10:8000; }
    upstream stress_1 { server 172.20.1.11:8000; }
    # aggiungi altri upstream se vuoi

    server {
        listen 80;
        set $backend "";

        location /metrics {
            deny all;
        }

        location / {
            rewrite_by_lua_block {
                local total_backends = 2
                local cookie = ngx.var.cookie_STRESS_ID
                local map = ngx.shared.session_map
                local target = cookie and map:get(cookie)

                if target then
                    ngx.var.backend = target
                else
                    math.randomseed(ngx.now() * 1000 + ngx.worker.pid())
                    local r = math.random(0, total_backends - 1)
                    target = "stress_" .. r
                    ngx.var.backend = target

                    -- se il client ha gi√† un cookie, mappalo a un backend
                    if cookie then
                        map:set(cookie, target, 3600)  -- durata 1 ora
                    end
                end
            }

            proxy_pass http://$backend$request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
